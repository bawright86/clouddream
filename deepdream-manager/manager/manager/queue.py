layers = [
"conv1/7x7_s2",
"pool1/3x3_s2",
"pool1/norm1",
"conv2/3x3_reduce",
"conv2/3x3",
"conv2/norm2",
"pool2/3x3_s2",
"pool2/3x3_s2_pool2/3x3_s2_0_split_0",
"pool2/3x3_s2_pool2/3x3_s2_0_split_1",
"pool2/3x3_s2_pool2/3x3_s2_0_split_2",
"pool2/3x3_s2_pool2/3x3_s2_0_split_3",
"inception_3a/1x1",
"inception_3a/3x3_reduce",
"inception_3a/3x3",
"inception_3a/5x5_reduce",
"inception_3a/5x5",
"inception_3a/pool",
"inception_3a/pool_proj",
"inception_3a/output",
"inception_3a/output_inception_3a/output_0_split_0",
"inception_3a/output_inception_3a/output_0_split_1",
"inception_3a/output_inception_3a/output_0_split_2",
"inception_3a/output_inception_3a/output_0_split_3",
"inception_3b/1x1",
"inception_3b/3x3_reduce",
"inception_3b/3x3",
"inception_3b/5x5_reduce",
"inception_3b/5x5",
"inception_3b/pool",
"inception_3b/pool_proj",
"inception_3b/output",
"pool3/3x3_s2",
"pool3/3x3_s2_pool3/3x3_s2_0_split_0",
"pool3/3x3_s2_pool3/3x3_s2_0_split_1",
"pool3/3x3_s2_pool3/3x3_s2_0_split_2",
"pool3/3x3_s2_pool3/3x3_s2_0_split_3",
"inception_4a/1x1",
"inception_4a/3x3_reduce",
"inception_4a/3x3",
"inception_4a/5x5_reduce",
"inception_4a/5x5",
"inception_4a/pool",
"inception_4a/pool_proj",
"inception_4a/output",
"inception_4a/output_inception_4a/output_0_split_0",
"inception_4a/output_inception_4a/output_0_split_1",
"inception_4a/output_inception_4a/output_0_split_2",
"inception_4a/output_inception_4a/output_0_split_3",
"inception_4b/1x1",
"inception_4b/3x3_reduce",
"inception_4b/3x3",
"inception_4b/5x5_reduce",
"inception_4b/5x5",
"inception_4b/pool",
"inception_4b/pool_proj",
"inception_4b/output",
"inception_4b/output_inception_4b/output_0_split_0",
"inception_4b/output_inception_4b/output_0_split_1",
"inception_4b/output_inception_4b/output_0_split_2",
"inception_4b/output_inception_4b/output_0_split_3",
"inception_4c/1x1",
"inception_4c/3x3_reduce",
"inception_4c/3x3",
"inception_4c/5x5_reduce",
"inception_4c/5x5",
"inception_4c/pool",
"inception_4c/pool_proj",
"inception_4c/output",
"inception_4c/output_inception_4c/output_0_split_0",
"inception_4c/output_inception_4c/output_0_split_1",
"inception_4c/output_inception_4c/output_0_split_2",
"inception_4c/output_inception_4c/output_0_split_3",
"inception_4d/1x1",
"inception_4d/3x3_reduce",
"inception_4d/3x3",
"inception_4d/5x5_reduce",
"inception_4d/5x5",
"inception_4d/pool",
"inception_4d/pool_proj",
"inception_4d/output",
"inception_4d/output_inception_4d/output_0_split_0",
"inception_4d/output_inception_4d/output_0_split_1",
"inception_4d/output_inception_4d/output_0_split_2",
"inception_4d/output_inception_4d/output_0_split_3",
"inception_4e/1x1",
"inception_4e/3x3_reduce",
"inception_4e/3x3",
"inception_4e/5x5_reduce",
"inception_4e/5x5",
"inception_4e/pool",
"inception_4e/pool_proj",
"inception_4e/output",
"pool4/3x3_s2",
"pool4/3x3_s2_pool4/3x3_s2_0_split_0",
"pool4/3x3_s2_pool4/3x3_s2_0_split_1",
"pool4/3x3_s2_pool4/3x3_s2_0_split_2",
"pool4/3x3_s2_pool4/3x3_s2_0_split_3",
"inception_5a/1x1",
"inception_5a/3x3_reduce",
"inception_5a/3x3",
"inception_5a/5x5_reduce",
"inception_5a/5x5",
"inception_5a/pool",
"inception_5a/pool_proj",
"inception_5a/output",
"inception_5a/output_inception_5a/output_0_split_0",
"inception_5a/output_inception_5a/output_0_split_1",
"inception_5a/output_inception_5a/output_0_split_2",
"inception_5a/output_inception_5a/output_0_split_3",
"inception_5b/1x1",
"inception_5b/3x3_reduce",
"inception_5b/3x3",
"inception_5b/5x5_reduce",
"inception_5b/5x5",
"inception_5b/pool",
"inception_5b/pool_proj",
"inception_5b/output",
]

image_ids = [
    3,
    7,
    14,
    19,
    34,
    43,
    44,
    55,
    59,
    66,
    72,
    98,
]

iterations = [6, 10, 14, 20]

octaves = [4, 6, 8]

import json

from app import db, Job, compute_queue


for layer in layers:
    for iteration in iterations:
        for octave in octaves:
            for image_id in image_ids:
                    parameters = {
                        "maxwidth": 800,
                        "end": layer,
                        "iter_n": iteration,
                        "octave_n": octave,
                    }
                    job = Job(source_image_id=image_id,
                              parameters=json.dumps(parameters))
                    db.session.add(job)
                    db.session.commit()

                    compute_queue.enqueue_call(
                        func='worker.process_job', timeout=3600, kwargs={"job_id": job.id}
                    )
